Interface describes behaviour and it is upto some classes to fully implement it.
Abstract classes describe behaviour and implement part of them and rest of them can be abstract. The extending classes
can use the common behaviours and override the abstract ones. They can override the common ones too.

Consider a strategy pattern. Say we have a SetOfNumbers Class. We have a requirement to return next integer in the set.
If that is the only requirement then it is better to define this an interface. We can implement to it returm the numbers
in a random way, sorted way increaeasing or decreasing. On the other hand, if we need the sum, mean, median, variance etc they
we have some behaviours that is fixed, then we can have an abstract class with these basic behaviours defined and then keep
the getNextInt as an abstract method.

From stackoverflow,

I will give you an example first:

public interface LoginAuth{
   public String encryptPassword(String pass);
   public void checkDBforUser();
}
Now suppose you have 3 databases in your application. Then each and every implementation for that database needs to define the above 2 methods:

public class DBMySQL implements LoginAuth{
          // Needs to implement both methods
}
public class DBOracle implements LoginAuth{
          // Needs to implement both methods
}
public class DBAbc implements LoginAuth{
          // Needs to implement both methods
}
But what if encryptPassword() is not database dependent, and it's the same for each class? Then the above would not be a good approach.

Instead, consider this approach:

public abstract class LoginAuth{
   public String encryptPassword(String pass){
            // Implement the same default behavior here
            // that is shared by all subclasses.
   }

   // Each subclass needs to provide their own implementation of this only:
   public abstract void checkDBforUser();
}
Now in each child class, we only need to implement one method - the method that is database dependent.

==============================================================================================================================================

